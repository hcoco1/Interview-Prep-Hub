{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Interview Prep Hub Created by: Ivan Arias \"At Interview Prep Hub, we offer a comprehensive collection of interview questions and expertly crafted answers to help you prepare for any job interview. Whether you're a seasoned professional or just starting your career, our resources are designed to boost your confidence and ensure you make a great impression.\" Table of Contents Elevator Pitch Videos & Audios Non-Technical Questions General STAR Method Interview 1 Resume Technical Questions JavaScript (Vanilla) React Python Cybersecurity: Asset and Inventory Network Systems AWS","title":"Overview"},{"location":"#welcome-to-interview-prep-hub","text":"Created by: Ivan Arias \"At Interview Prep Hub, we offer a comprehensive collection of interview questions and expertly crafted answers to help you prepare for any job interview. Whether you're a seasoned professional or just starting your career, our resources are designed to boost your confidence and ensure you make a great impression.\"","title":"Welcome to Interview Prep Hub"},{"location":"#table-of-contents","text":"","title":"Table of Contents"},{"location":"#elevator-pitch","text":"Videos & Audios","title":"Elevator Pitch"},{"location":"#non-technical-questions","text":"General STAR Method Interview 1 Resume","title":"Non-Technical Questions"},{"location":"#technical-questions","text":"JavaScript (Vanilla) React Python Cybersecurity: Asset and Inventory Network Systems AWS","title":"Technical Questions"},{"location":"arrays/","text":"","title":"Arrays"},{"location":"assest_cyber/","text":"Where does Linux store its logs? Linux typically stores its logs in the /var/log directory. Some common log files found there include: /var/log/syslog or /var/log/messages for general system logs. /var/log/auth.log for authentication logs. /var/log/kern.log for kernel logs. /var/log/dmesg for boot messages. /var/log/apt for logs related to package installations (on Debian-based systems). Which Linux command do you love the most? Why? One of my favorite Linux commands is grep . It is incredibly powerful for searching through text. Whether you're looking for specific patterns in log files, configuration files, or any other text files, grep is versatile and efficient. The ability to combine it with other commands using pipes makes it even more powerful. How would you read a file in the Linux terminal? To read a file in the Linux terminal, you can use several commands such as: cat filename to display the entire file. less filename to view the file one page at a time. more filename similar to less , but with fewer features. tail -n 10 filename to view the last 10 lines of the file. head -n 10 filename to view the first 10 lines of the file. Tell me about the last time you analyzed logs in Linux for security issues or fun. The last time I analyzed logs in Linux for security issues was when I was troubleshooting a potential unauthorized access attempt. I used grep to search for unusual login attempts in the /var/log/auth.log file. By filtering for failed login attempts and reviewing the IP addresses, I identified several suspicious patterns, which I then blocked using iptables . What is bash? Bash (Bourne Again SHell) is a Unix shell and command language written as a free software replacement for the Bourne shell. It is widely used as the default login shell for most Linux distributions and macOS. Bash can execute commands read from the standard input or from a file and provides features such as scripting capabilities, command history, and tab completion. Which Linux distribution do you like the most? My favorite Linux distribution is Ubuntu. It is user-friendly, has excellent community support, and is based on Debian, making it stable and reliable. Ubuntu also has a vast repository of software packages, which makes it easy to install and manage software. What is the difference between Linux, Unix, and GNU? Linux : A kernel that is the core part of the operating system. It manages hardware resources and provides essential services to other software. Unix : A family of multitasking, multiuser computer operating systems that derive from the original AT&T Unix. Unix systems are known for their stability and robustness. GNU : A free software project initiated by Richard Stallman to create a complete Unix-like operating system composed entirely of free software. GNU stands for \"GNU's Not Unix.\" The combination of GNU software and the Linux kernel results in a fully functional operating system, often referred to as GNU/Linux. My Linux server keeps losing network connectivity. How do I troubleshoot this? To troubleshoot network connectivity issues on a Linux server, you can follow these steps: Check the network interface : Use ip a or ifconfig to ensure the network interface is up and has an IP address. Ping the gateway : Use ping <gateway-ip> to check if you can reach the gateway. Check DNS resolution : Use nslookup or dig to verify DNS resolution. Review network configuration : Check /etc/network/interfaces or /etc/netplan/*.yaml (depending on your distribution) for any misconfigurations. Check logs : Review /var/log/syslog or /var/log/messages for any relevant network error messages. Restart network services : Use systemctl restart networking or systemctl restart NetworkManager . Check firewall settings : Use iptables -L to review firewall rules that might be blocking traffic. Where do you get your security news from? I get my security news from a variety of sources, including: - Websites : Ars Technica, Bleeping Computer, and Krebs on Security. - Newsletters : The Hacker News, SANS NewsBites. - Forums and communities : Reddit (r/netsec), Stack Exchange (Information Security). - Podcasts : Security Now, Darknet Diaries. - Social Media : Following security experts on Twitter and LinkedIn. Videos Basic Linux Questions The grep Command General (Technical and non Technical) questions.","title":"Asset and Inventory"},{"location":"assest_cyber/#where-does-linux-store-its-logs","text":"Linux typically stores its logs in the /var/log directory. Some common log files found there include: /var/log/syslog or /var/log/messages for general system logs. /var/log/auth.log for authentication logs. /var/log/kern.log for kernel logs. /var/log/dmesg for boot messages. /var/log/apt for logs related to package installations (on Debian-based systems).","title":"Where does Linux store its logs?"},{"location":"assest_cyber/#which-linux-command-do-you-love-the-most-why","text":"One of my favorite Linux commands is grep . It is incredibly powerful for searching through text. Whether you're looking for specific patterns in log files, configuration files, or any other text files, grep is versatile and efficient. The ability to combine it with other commands using pipes makes it even more powerful.","title":"Which Linux command do you love the most? Why?"},{"location":"assest_cyber/#how-would-you-read-a-file-in-the-linux-terminal","text":"To read a file in the Linux terminal, you can use several commands such as: cat filename to display the entire file. less filename to view the file one page at a time. more filename similar to less , but with fewer features. tail -n 10 filename to view the last 10 lines of the file. head -n 10 filename to view the first 10 lines of the file.","title":"How would you read a file in the Linux terminal?"},{"location":"assest_cyber/#tell-me-about-the-last-time-you-analyzed-logs-in-linux-for-security-issues-or-fun","text":"The last time I analyzed logs in Linux for security issues was when I was troubleshooting a potential unauthorized access attempt. I used grep to search for unusual login attempts in the /var/log/auth.log file. By filtering for failed login attempts and reviewing the IP addresses, I identified several suspicious patterns, which I then blocked using iptables .","title":"Tell me about the last time you analyzed logs in Linux for security issues or fun."},{"location":"assest_cyber/#what-is-bash","text":"Bash (Bourne Again SHell) is a Unix shell and command language written as a free software replacement for the Bourne shell. It is widely used as the default login shell for most Linux distributions and macOS. Bash can execute commands read from the standard input or from a file and provides features such as scripting capabilities, command history, and tab completion.","title":"What is bash?"},{"location":"assest_cyber/#which-linux-distribution-do-you-like-the-most","text":"My favorite Linux distribution is Ubuntu. It is user-friendly, has excellent community support, and is based on Debian, making it stable and reliable. Ubuntu also has a vast repository of software packages, which makes it easy to install and manage software.","title":"Which Linux distribution do you like the most?"},{"location":"assest_cyber/#what-is-the-difference-between-linux-unix-and-gnu","text":"Linux : A kernel that is the core part of the operating system. It manages hardware resources and provides essential services to other software. Unix : A family of multitasking, multiuser computer operating systems that derive from the original AT&T Unix. Unix systems are known for their stability and robustness. GNU : A free software project initiated by Richard Stallman to create a complete Unix-like operating system composed entirely of free software. GNU stands for \"GNU's Not Unix.\" The combination of GNU software and the Linux kernel results in a fully functional operating system, often referred to as GNU/Linux.","title":"What is the difference between Linux, Unix, and GNU?"},{"location":"assest_cyber/#my-linux-server-keeps-losing-network-connectivity-how-do-i-troubleshoot-this","text":"To troubleshoot network connectivity issues on a Linux server, you can follow these steps: Check the network interface : Use ip a or ifconfig to ensure the network interface is up and has an IP address. Ping the gateway : Use ping <gateway-ip> to check if you can reach the gateway. Check DNS resolution : Use nslookup or dig to verify DNS resolution. Review network configuration : Check /etc/network/interfaces or /etc/netplan/*.yaml (depending on your distribution) for any misconfigurations. Check logs : Review /var/log/syslog or /var/log/messages for any relevant network error messages. Restart network services : Use systemctl restart networking or systemctl restart NetworkManager . Check firewall settings : Use iptables -L to review firewall rules that might be blocking traffic.","title":"My Linux server keeps losing network connectivity. How do I troubleshoot this?"},{"location":"assest_cyber/#where-do-you-get-your-security-news-from","text":"I get my security news from a variety of sources, including: - Websites : Ars Technica, Bleeping Computer, and Krebs on Security. - Newsletters : The Hacker News, SANS NewsBites. - Forums and communities : Reddit (r/netsec), Stack Exchange (Information Security). - Podcasts : Security Now, Darknet Diaries. - Social Media : Following security experts on Twitter and LinkedIn.","title":"Where do you get your security news from?"},{"location":"assest_cyber/#videos","text":"","title":"Videos"},{"location":"assest_cyber/#basic-linux-questions","text":"","title":"Basic Linux Questions"},{"location":"assest_cyber/#the-grep-command","text":"","title":"The grep Command"},{"location":"assest_cyber/#general-technical-and-non-technical-questions","text":"","title":"General (Technical and non Technical) questions."},{"location":"aws/","text":"","title":"AWS"},{"location":"interview/","text":"Interview Questions (Flatiron School) 1. Tell me about yourself. Thank you for allowing me to be interviewed for this position today. My name is Ivan, and I am a full-stack developer. Before submitting my resume, I read the job description and am confident I have the skills, qualities, and knowledge to excel in the role. I recently graduated with a CERTIFICATION in Web Development. I am a fast learner; I possess excellent problem-solving capabilities and can manage a significant workload. I have an impressive track record of achievement. For example, in my previous role, my supervisor praised me for helping the company increase productivity by improving operations following the standard of work. The type of person I am means I always act as a positive role model for the company and will take responsibility for my ongoing professional development. I'm excited to apply my skills and continue learning professionally. If you hire me for this position, you will quickly see a positive return on your investment. 2. Why do you want to be a developer? I've always been fascinated by technology and its potential to impact people's lives significantly. I love the idea of creating solutions to real-world problems through coding. During my early programming courses at Flatiron School, I discovered how much I enjoyed the logical thinking and creativity required in software development, which solidified my decision to pursue a career in this field. 3. Why do you want to work on Cybersecurity? I am deeply passionate about working in cybersecurity for several reasons. Firstly, the field is constantly evolving, which means there is always something new to learn. This continuous learning and the challenge of staying ahead of potential threats are both exciting and intellectually stimulating for me. Secondly, I am driven by a strong sense of purpose and the desire to make a positive impact. In today\u2019s digital age, cybersecurity is crucial in protecting individuals, organizations, and even nations from cyber threats. By working in this field, I can contribute to safeguarding sensitive information, maintaining privacy, and ensuring the integrity of critical infrastructure. Additionally, I have a background in computer science and have always been fascinated by the intricacies of network security, cryptography, and ethical hacking. My educational and professional experiences have equipped me with the technical skills needed to excel in cybersecurity, and I am eager to apply these skills in a practical setting. Finally, cybersecurity offers a dynamic and rewarding career path. The demand for cybersecurity professionals is high and continues to grow, providing ample opportunities for career advancement and specialization. I am excited about the potential for growth and the prospect of working with cutting-edge technologies in this field. In summary, my passion for continuous learning, desire to make a meaningful impact, technical background, and the promising career prospects make cybersecurity the perfect field for me. 4. What intrigued you about this role or company? \"I want this job because it is a role and industry I am passionate about, and my research tells me you are a forward-thinking company with an inclusive workplace culture where there is opportunity for all. My dedication, enthusiasm, and skills make me a strong fit for this role. I am excited about the opportunity to contribute to your team's success and thrive in an inclusive and collaborative workplace. 5. How can your previous background add value to [this company/role]? I will quickly add value to your business in this role. I am a self-starter and can be left alone to complete tasks quickly, diligently, and on time. I will bring a positive attitude to the position that will rub off on my co-workers and always take responsibility for my professional development. You should also hire me because I have a track record of achievement. For example, in a previous role, my supervisor praised me for my work speed and how I would get more tasks done than the average person. 6. What did you learn in your Flatiron School's program? The Flatiron School's curriculum covered a variety of technologies and tools, focusing on Python using Flask for back-end development and JavaScript for front-end development. Throughout the program, I improve my web development skills. I learned to design and implement robust databases, create RESTful APIs, and develop responsive user interfaces. The hands-on projects and collaborative learning environment at Flatiron School equipped me with the practical experience and problem-solving skills necessary for a successful career in web development. 7. What did you learn in your Full Stack School's program? The cyber bootcamp offered a comprehensive education in offensive and defensive cybersecurity strategies. On the offensive side, participants learned Red Team skills, including identifying and exploiting web vulnerabilities, executing social engineering attacks, and using tools like Metasploit for exploitation and credential collection. They also learned privilege escalation and lateral movement techniques, gaining a deep understanding of attackers' methods. On the defensive side, Blue Team training is designed to empower participants by focusing on strengthening systems against attacks. They learn to parse logs effectively, create Splunk visualizations, and conduct digital forensics to investigate and mitigate security incidents. This comprehensive approach equips them with the skills to identify, protect, detect, respond to, and recover from cyber threats, ensuring a solid defensive posture and instilling confidence in their abilities. In addition to Red and Blue Team training, the bootcamp emphasizes the versatility of Python programming for automating tasks, parsing logs, and analyzing data, enhancing overall cybersecurity proficiency. This emphasis on Python not only enhances their technical skills but also makes them adaptable and resourceful in the face of evolving cybersecurity challenges. The bootcamp also hones system administration skills with a focus on managing files, permissions, and applications in both Windows and Linux environments. Overall, the bootcamp's curriculum provided a balanced and rigorous education, equipping participants with the knowledge and skills to address real-world cybersecurity challenges from offensive and defensive perspectives effectively. 8. Walk me through one of your projects that you are most proud of. (Web Development 1/2) One of the projects I'm particularly proud of is the Database Tool, which I developed during Phase 3 of my Flatiron School program. The reason I built this app is intensely personal; I wanted to create an educational app for my children. Database Tool allows users to study US entities, including a fun and engaging game to test their knowledge. Database Tool is a command line interface (CLI) built using PYTHON tools like SQLALCHEMY, SQLITE3, and CLICK. Its primary purpose is to manage US entities such as states, cities, and counties, focusing on making CRUD (Create, Read, Update, Delete) operations intuitive and user-friendly. One unique aspect of Database Tool is that it comes with a game that challenges users to guess the capitals of the US states. In the future, I plan to expand the scope of Database Tool by adding new topics such as math, science, and history. Additionally, I have plans to translate the app into Spanish, making it accessible to a broader audience. 9. Walk me through one of your projects that you are most proud of. (Web Development 2/2) 10. Walk me through one of your projects that you are most proud of. (Cybersecurity) 11. Tell me about a time when you successfully solved a problem/resolved a difficult situation and how you did that. Situation : When I started in a previous role, my manager asked me to do a simple administrative task. I\u2019d completed this type of work many times before, so I thought I knew what to do. Task : However, I listened only partially to his brief and missed an essential part of the task. I failed because I hadn\u2019t completed everything as per his instructions. Action : As soon I realized this, I apologized unreservedly and took action to make things right. I then decided to make changes to how I worked. I wrote down all the instructions, confirmed them with my manager, and double-checked everything. Result : I always succeeded because of my new systematic approach to working. 12. What are your salary expectations? \"I researched the salary range for this position and industry on GlassDoor.com before the interview. The salary range is between $40,000 and $53,000. Based on my knowledge, expertise, work ethic, and the value I can add to your team, I am worth the upper end of that salary range. However, I also appreciate that you do not know me, and I need to prove to you my worth. Therefore, I would be comfortable with a salary of $51,000, and for that amount, I will ensure you see a positive return from your investment.\" 13. What questions do you have for me? Please tell me more about the team I would be a part of in this role. What qualities and attributes make for a successful employee in this company? What do you think is the most challenging aspect of the job? 14. What are your strengths and weaknesses? My greatest strengths are flexibility and adaptability, taking ownership of my self-development and problem-solving capabilities. I am flexible and will carry out tasks outside my job description and work overtime to assist the company. I am a good problem solver who will not shy away from a difficult challenge. Finally, I will always take ownership of my ongoing development to be a valuable asset to my team. My biggest weakness is that I need to improve my public speaking skills. However, this is a skill I want to develop, so if there are any opportunities in this position for me to practice, I would like to give it a try. My weakness is I find it hard to say no to people, which sometimes means I take on too many responsibilities. 15. What motivates you? Several factors are my primary motivators. First and foremost, delivering exceptional performance for my employer is a driving force, providing financial rewards and job security. My motivation sources are also maintaining a healthy lifestyle and supporting my family. Finally, self-development is another motivator. If I am developing professionally, I feel good about myself, am adding value to my team, and will get more opportunities in the company. 16. How do you respond to criticism? I respond to criticism positively. I see constructive criticism and feedback as valuable information and advice to help me improve and add value to my employer. When someone offers me feedback, I will listen to what they say and determine if it can help me improve. I will take positive action to quickly develop the skills and qualities needed to reach my goal. 17. What to say when you cannot answer an interview question I am very sorry, I don\u2019t know the answer to that question. However, as soon I get back from the interview, I will conduct some research and contact you by email to let you know. SOFTWARE ENGINEER Behavioral Interview Questions","title":"Interview 1"},{"location":"interview/#interview-questions-flatiron-school","text":"","title":"Interview Questions (Flatiron School)"},{"location":"interview/#1-tell-me-about-yourself","text":"Thank you for allowing me to be interviewed for this position today. My name is Ivan, and I am a full-stack developer. Before submitting my resume, I read the job description and am confident I have the skills, qualities, and knowledge to excel in the role. I recently graduated with a CERTIFICATION in Web Development. I am a fast learner; I possess excellent problem-solving capabilities and can manage a significant workload. I have an impressive track record of achievement. For example, in my previous role, my supervisor praised me for helping the company increase productivity by improving operations following the standard of work. The type of person I am means I always act as a positive role model for the company and will take responsibility for my ongoing professional development. I'm excited to apply my skills and continue learning professionally. If you hire me for this position, you will quickly see a positive return on your investment.","title":"1. Tell me about yourself."},{"location":"interview/#2-why-do-you-want-to-be-a-developer","text":"I've always been fascinated by technology and its potential to impact people's lives significantly. I love the idea of creating solutions to real-world problems through coding. During my early programming courses at Flatiron School, I discovered how much I enjoyed the logical thinking and creativity required in software development, which solidified my decision to pursue a career in this field.","title":"2. Why do you want to be a developer?"},{"location":"interview/#3-why-do-you-want-to-work-on-cybersecurity","text":"I am deeply passionate about working in cybersecurity for several reasons. Firstly, the field is constantly evolving, which means there is always something new to learn. This continuous learning and the challenge of staying ahead of potential threats are both exciting and intellectually stimulating for me. Secondly, I am driven by a strong sense of purpose and the desire to make a positive impact. In today\u2019s digital age, cybersecurity is crucial in protecting individuals, organizations, and even nations from cyber threats. By working in this field, I can contribute to safeguarding sensitive information, maintaining privacy, and ensuring the integrity of critical infrastructure. Additionally, I have a background in computer science and have always been fascinated by the intricacies of network security, cryptography, and ethical hacking. My educational and professional experiences have equipped me with the technical skills needed to excel in cybersecurity, and I am eager to apply these skills in a practical setting. Finally, cybersecurity offers a dynamic and rewarding career path. The demand for cybersecurity professionals is high and continues to grow, providing ample opportunities for career advancement and specialization. I am excited about the potential for growth and the prospect of working with cutting-edge technologies in this field. In summary, my passion for continuous learning, desire to make a meaningful impact, technical background, and the promising career prospects make cybersecurity the perfect field for me.","title":"3. Why do you want to work on Cybersecurity?"},{"location":"interview/#4-what-intrigued-you-about-this-role-or-company","text":"\"I want this job because it is a role and industry I am passionate about, and my research tells me you are a forward-thinking company with an inclusive workplace culture where there is opportunity for all. My dedication, enthusiasm, and skills make me a strong fit for this role. I am excited about the opportunity to contribute to your team's success and thrive in an inclusive and collaborative workplace.","title":"4. What intrigued you about this role or company?"},{"location":"interview/#5-how-can-your-previous-background-add-value-to-this-companyrole","text":"I will quickly add value to your business in this role. I am a self-starter and can be left alone to complete tasks quickly, diligently, and on time. I will bring a positive attitude to the position that will rub off on my co-workers and always take responsibility for my professional development. You should also hire me because I have a track record of achievement. For example, in a previous role, my supervisor praised me for my work speed and how I would get more tasks done than the average person.","title":"5. How can your previous background add value to [this company/role]?"},{"location":"interview/#6-what-did-you-learn-in-your-flatiron-schools-program","text":"The Flatiron School's curriculum covered a variety of technologies and tools, focusing on Python using Flask for back-end development and JavaScript for front-end development. Throughout the program, I improve my web development skills. I learned to design and implement robust databases, create RESTful APIs, and develop responsive user interfaces. The hands-on projects and collaborative learning environment at Flatiron School equipped me with the practical experience and problem-solving skills necessary for a successful career in web development.","title":"6. What did you learn in your Flatiron School's program?"},{"location":"interview/#7-what-did-you-learn-in-your-full-stack-schools-program","text":"The cyber bootcamp offered a comprehensive education in offensive and defensive cybersecurity strategies. On the offensive side, participants learned Red Team skills, including identifying and exploiting web vulnerabilities, executing social engineering attacks, and using tools like Metasploit for exploitation and credential collection. They also learned privilege escalation and lateral movement techniques, gaining a deep understanding of attackers' methods. On the defensive side, Blue Team training is designed to empower participants by focusing on strengthening systems against attacks. They learn to parse logs effectively, create Splunk visualizations, and conduct digital forensics to investigate and mitigate security incidents. This comprehensive approach equips them with the skills to identify, protect, detect, respond to, and recover from cyber threats, ensuring a solid defensive posture and instilling confidence in their abilities. In addition to Red and Blue Team training, the bootcamp emphasizes the versatility of Python programming for automating tasks, parsing logs, and analyzing data, enhancing overall cybersecurity proficiency. This emphasis on Python not only enhances their technical skills but also makes them adaptable and resourceful in the face of evolving cybersecurity challenges. The bootcamp also hones system administration skills with a focus on managing files, permissions, and applications in both Windows and Linux environments. Overall, the bootcamp's curriculum provided a balanced and rigorous education, equipping participants with the knowledge and skills to address real-world cybersecurity challenges from offensive and defensive perspectives effectively.","title":"7. What did you learn in your Full Stack School's program?"},{"location":"interview/#8-walk-me-through-one-of-your-projects-that-you-are-most-proud-of-web-development-12","text":"One of the projects I'm particularly proud of is the Database Tool, which I developed during Phase 3 of my Flatiron School program. The reason I built this app is intensely personal; I wanted to create an educational app for my children. Database Tool allows users to study US entities, including a fun and engaging game to test their knowledge. Database Tool is a command line interface (CLI) built using PYTHON tools like SQLALCHEMY, SQLITE3, and CLICK. Its primary purpose is to manage US entities such as states, cities, and counties, focusing on making CRUD (Create, Read, Update, Delete) operations intuitive and user-friendly. One unique aspect of Database Tool is that it comes with a game that challenges users to guess the capitals of the US states. In the future, I plan to expand the scope of Database Tool by adding new topics such as math, science, and history. Additionally, I have plans to translate the app into Spanish, making it accessible to a broader audience.","title":"8. Walk me through one of your projects that you are most proud of. (Web Development 1/2)"},{"location":"interview/#9-walk-me-through-one-of-your-projects-that-you-are-most-proud-of-web-development-22","text":"","title":"9. Walk me through one of your projects that you are most proud of. (Web Development 2/2)"},{"location":"interview/#10-walk-me-through-one-of-your-projects-that-you-are-most-proud-of-cybersecurity","text":"","title":"10. Walk me through one of your projects that you are most proud of. (Cybersecurity)"},{"location":"interview/#11-tell-me-about-a-time-when-you-successfully-solved-a-problemresolved-a-difficult-situation-and-how-you-did-that","text":"Situation : When I started in a previous role, my manager asked me to do a simple administrative task. I\u2019d completed this type of work many times before, so I thought I knew what to do. Task : However, I listened only partially to his brief and missed an essential part of the task. I failed because I hadn\u2019t completed everything as per his instructions. Action : As soon I realized this, I apologized unreservedly and took action to make things right. I then decided to make changes to how I worked. I wrote down all the instructions, confirmed them with my manager, and double-checked everything. Result : I always succeeded because of my new systematic approach to working.","title":"11. Tell me about a time when you successfully solved a problem/resolved a difficult situation and how you did that."},{"location":"interview/#12-what-are-your-salary-expectations","text":"\"I researched the salary range for this position and industry on GlassDoor.com before the interview. The salary range is between $40,000 and $53,000. Based on my knowledge, expertise, work ethic, and the value I can add to your team, I am worth the upper end of that salary range. However, I also appreciate that you do not know me, and I need to prove to you my worth. Therefore, I would be comfortable with a salary of $51,000, and for that amount, I will ensure you see a positive return from your investment.\"","title":"12. What are your salary expectations?"},{"location":"interview/#13-what-questions-do-you-have-for-me","text":"Please tell me more about the team I would be a part of in this role. What qualities and attributes make for a successful employee in this company? What do you think is the most challenging aspect of the job?","title":"13. What questions do you have for me?"},{"location":"interview/#14-what-are-your-strengths-and-weaknesses","text":"My greatest strengths are flexibility and adaptability, taking ownership of my self-development and problem-solving capabilities. I am flexible and will carry out tasks outside my job description and work overtime to assist the company. I am a good problem solver who will not shy away from a difficult challenge. Finally, I will always take ownership of my ongoing development to be a valuable asset to my team. My biggest weakness is that I need to improve my public speaking skills. However, this is a skill I want to develop, so if there are any opportunities in this position for me to practice, I would like to give it a try. My weakness is I find it hard to say no to people, which sometimes means I take on too many responsibilities.","title":"14. What are your strengths and weaknesses?"},{"location":"interview/#15-what-motivates-you","text":"Several factors are my primary motivators. First and foremost, delivering exceptional performance for my employer is a driving force, providing financial rewards and job security. My motivation sources are also maintaining a healthy lifestyle and supporting my family. Finally, self-development is another motivator. If I am developing professionally, I feel good about myself, am adding value to my team, and will get more opportunities in the company.","title":"15. What motivates you?"},{"location":"interview/#16-how-do-you-respond-to-criticism","text":"I respond to criticism positively. I see constructive criticism and feedback as valuable information and advice to help me improve and add value to my employer. When someone offers me feedback, I will listen to what they say and determine if it can help me improve. I will take positive action to quickly develop the skills and qualities needed to reach my goal.","title":"16. How do you respond to criticism?"},{"location":"interview/#17-what-to-say-when-you-cannot-answer-an-interview-question","text":"I am very sorry, I don\u2019t know the answer to that question. However, as soon I get back from the interview, I will conduct some research and contact you by email to let you know.","title":"17. What to say when you cannot answer an interview question"},{"location":"interview/#software-engineer-behavioral-interview-questions","text":"","title":"SOFTWARE ENGINEER Behavioral Interview Questions"},{"location":"js_basic/","text":"Level-1: Basic Is Javascript single-threaded? Yes, JavaScript is a single-threaded language. This means that it has only one call stack and one memory heap. Only one set of instructions is executed at a time. Also, Javascript is Synchronous and blocking in nature. Meaning that code is executed line by line and one task must be completed before the next one begins However, JavaScript also has asynchronous capabilities, which allow certain operations to be executed independently of the main execution thread. This is commonly achieved through mechanisms like callbacks, promises, async/await, and event listeners. These asynchronous features enable JavaScript to handle tasks such as fetching data, handling user input, and performing I/O operations without blocking the main thread, making it suitable for building responsive and interactive web applications. Explain the main component of the JavaScript Engine and how it works. Every browser has a Javascript engine that executes the javascript code and converts it into machine code. Explain the event loop in JavaScript and how it helps in asynchronous programming. The event loop is a mechanism that continuously checks the call stack to see if it's empty. If the call stack is empty, it checks the callback queue and pushes any available callbacks onto the call stack for execution. This allows JavaScript to perform non-blocking asynchronous operations despite being single-threaded. Difference between var , let , and const ? var : Function-scoped, can be re-declared, and has hoisting issues. let : Block-scoped, cannot be re-declared in the same scope, and prevents hoisting issues. const : Block-scoped, cannot be re-assigned or re-declared, and prevents hoisting issues. Different data types in JavaScript? Primitive Types: String , Number , Boolean , Null , Undefined , Symbol , BigInt Non-Primitive Types: Object (includes Array , Function , Date , etc.) What is a callback function and callback hell? A callback function is a function passed as an argument to another function, to be executed later. Callback hell refers to the phenomenon of having multiple nested callbacks, which makes the code difficult to read and maintain. What is a Promise and Promise chaining? A Promise is an object representing the eventual completion or failure of an asynchronous operation. Promise chaining is the practice of attaching multiple .then() handlers to handle successive asynchronous operations. What is async/await? async / await is syntax for handling Promises more easily. An async function returns a Promise, and await pauses the function execution until the Promise is resolved or rejected. What is the difference between == and === operators? == (loose equality): Compares values after type conversion. === (strict equality): Compares values without type conversion. Different ways to create an Object in JavaScript? Using object literals: let obj = {}; Using the Object constructor: let obj = new Object(); Using Object.create() : let obj = Object.create(proto); Using class syntax: class MyClass {} What is rest and spread operator? Rest operator ( ... ) : Collects multiple elements into an array. function foo (... args ) { console . log ( args ); } Spread operator ( ... ) : Spreads elements of an array or object. let arr = [ 1 , 2 , 3 ]; let newArr = [... arr ]; What is a higher-order function? A higher-order function is a function that can take other functions as arguments or return a function as a result.","title":"Basic"},{"location":"js_basic/#level-1-basic","text":"Is Javascript single-threaded? Yes, JavaScript is a single-threaded language. This means that it has only one call stack and one memory heap. Only one set of instructions is executed at a time. Also, Javascript is Synchronous and blocking in nature. Meaning that code is executed line by line and one task must be completed before the next one begins However, JavaScript also has asynchronous capabilities, which allow certain operations to be executed independently of the main execution thread. This is commonly achieved through mechanisms like callbacks, promises, async/await, and event listeners. These asynchronous features enable JavaScript to handle tasks such as fetching data, handling user input, and performing I/O operations without blocking the main thread, making it suitable for building responsive and interactive web applications. Explain the main component of the JavaScript Engine and how it works. Every browser has a Javascript engine that executes the javascript code and converts it into machine code. Explain the event loop in JavaScript and how it helps in asynchronous programming. The event loop is a mechanism that continuously checks the call stack to see if it's empty. If the call stack is empty, it checks the callback queue and pushes any available callbacks onto the call stack for execution. This allows JavaScript to perform non-blocking asynchronous operations despite being single-threaded. Difference between var , let , and const ? var : Function-scoped, can be re-declared, and has hoisting issues. let : Block-scoped, cannot be re-declared in the same scope, and prevents hoisting issues. const : Block-scoped, cannot be re-assigned or re-declared, and prevents hoisting issues. Different data types in JavaScript? Primitive Types: String , Number , Boolean , Null , Undefined , Symbol , BigInt Non-Primitive Types: Object (includes Array , Function , Date , etc.) What is a callback function and callback hell? A callback function is a function passed as an argument to another function, to be executed later. Callback hell refers to the phenomenon of having multiple nested callbacks, which makes the code difficult to read and maintain. What is a Promise and Promise chaining? A Promise is an object representing the eventual completion or failure of an asynchronous operation. Promise chaining is the practice of attaching multiple .then() handlers to handle successive asynchronous operations. What is async/await? async / await is syntax for handling Promises more easily. An async function returns a Promise, and await pauses the function execution until the Promise is resolved or rejected. What is the difference between == and === operators? == (loose equality): Compares values after type conversion. === (strict equality): Compares values without type conversion. Different ways to create an Object in JavaScript? Using object literals: let obj = {}; Using the Object constructor: let obj = new Object(); Using Object.create() : let obj = Object.create(proto); Using class syntax: class MyClass {} What is rest and spread operator? Rest operator ( ... ) : Collects multiple elements into an array. function foo (... args ) { console . log ( args ); } Spread operator ( ... ) : Spreads elements of an array or object. let arr = [ 1 , 2 , 3 ]; let newArr = [... arr ]; What is a higher-order function? A higher-order function is a function that can take other functions as arguments or return a function as a result.","title":"Level-1: Basic"},{"location":"js_intermediate/","text":"Level-2 : Intermediate What is Closure? What are the use cases of Closures? A closure is a function that retains access to its lexical scope even when the function is executed outside that scope. Use cases include data encapsulation, creating private variables, and function factories. Explain the concept of hoisting in JavaScript. Hoisting is JavaScript's default behavior of moving declarations (not initializations) to the top of their containing scope during compilation. var declarations are hoisted to the top of their function scope, while let and const declarations are hoisted to the top of their block scope but are not initialized. What is a Temporal Dead Zone? The Temporal Dead Zone (TDZ) is the time period between entering a scope and the actual declaration of a variable where accessing the variable will result in a ReferenceError . What is a prototype chain? and Object.create() method? The prototype chain is a series of linked prototypes. Every object has a prototype, and a prototype can have its own prototype, forming a chain. Object.create(proto) creates a new object with the specified prototype. What is the difference between Call, Apply, and Bind methods? call : Invokes a function with a specified this value and arguments provided individually. apply : Invokes a function with a specified this value and arguments provided as an array. bind : Returns a new function, permanently bound to the provided this value and initial arguments. What are lambda or arrow functions? Arrow functions are a concise syntax for writing functions using the => arrow notation. They do not have their own this value and cannot be used as constructors. What is the currying function? Currying is the process of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. What are the features of ES6? Some key features of ES6 (ECMAScript 2015) include: let and const declarations Arrow functions Template literals Destructuring assignment Default parameters Rest and spread operators Classes Promises Modules (import/export) Enhanced object literals","title":"Intermediate"},{"location":"js_intermediate/#level-2-intermediate","text":"What is Closure? What are the use cases of Closures? A closure is a function that retains access to its lexical scope even when the function is executed outside that scope. Use cases include data encapsulation, creating private variables, and function factories. Explain the concept of hoisting in JavaScript. Hoisting is JavaScript's default behavior of moving declarations (not initializations) to the top of their containing scope during compilation. var declarations are hoisted to the top of their function scope, while let and const declarations are hoisted to the top of their block scope but are not initialized. What is a Temporal Dead Zone? The Temporal Dead Zone (TDZ) is the time period between entering a scope and the actual declaration of a variable where accessing the variable will result in a ReferenceError . What is a prototype chain? and Object.create() method? The prototype chain is a series of linked prototypes. Every object has a prototype, and a prototype can have its own prototype, forming a chain. Object.create(proto) creates a new object with the specified prototype. What is the difference between Call, Apply, and Bind methods? call : Invokes a function with a specified this value and arguments provided individually. apply : Invokes a function with a specified this value and arguments provided as an array. bind : Returns a new function, permanently bound to the provided this value and initial arguments. What are lambda or arrow functions? Arrow functions are a concise syntax for writing functions using the => arrow notation. They do not have their own this value and cannot be used as constructors. What is the currying function? Currying is the process of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. What are the features of ES6? Some key features of ES6 (ECMAScript 2015) include: let and const declarations Arrow functions Template literals Destructuring assignment Default parameters Rest and spread operators Classes Promises Modules (import/export) Enhanced object literals","title":"Level-2 : Intermediate"},{"location":"pitch/","text":"Developing Your Elevator Pitch An elevator pitch is your short (30-60 second) professional introduction. A prepared elevator pitch will help you start a conversation with potential employers, faculty members, alumni and others. (Developing Your Elevator Pitch, n.d.) Why you need an elevator pitch According to the U.S. Bureau of Labor Statistics, 70% of all jobs are found through networking. By building authentic relationships with professionals, over time you can uncover job opportunities that might not be posted, or possibly create an opportunity that did not previously exist. By engaging in networking activities, it allows you to raise awareness of \u201cyour personal brand\u201d by meeting other professionals and sharing your abilities, skills and background. In turn when people in your network hear about potential opportunities, they may immediately think of you. Your elevator pitch should: Communicate your personal brand and what you want to be known for Convey your unique selling points Answer the questions \u201cTell me about yourself\u2019 \u201cWhat do you do?\u201d and \u201cWhat are you interested in doing next? (Developing Your Elevator Pitch, n.d.). Before you create your pitch, first think about: What makes you unique? What are you seeking? What can you offer? What do you want a person to remember about you? (Developing Your Elevator Pitch, n.d.). Create your pitch in five steps Spend some time thinking about and writing down your top work and school experiences using the STAR Method (Situation, Task, Action and Result). Choose one one-to-two experiences you want to pitch. Shorten each story to a sentence or two focusing on your actions and the results of those actions. Analyze the common themes: What are you good at? What do you like doing? Are you a problem solver, analytical thinker, effective communicator, innovator, etc? Tailoring your pitch for the audience/person you are speaking to and the setting you are in Put it together and make it conversational. Add a question to the end of your description or offer to help someone with something they are working on. (Developing Your Elevator Pitch, n.d.). Ivan's Sample Pitch Elevator Pitch 2023 (Ivan's Voice) Transcript I'm Ivan Arias; I recently graduated with a certification in Web development. I'm passionate about mastering front-end and back-end development. I have a geological background and strong interpersonal and team-building skills. I am a completer-finisher who can be relied upon to complete a job on time and to an excellent standard. I am reliable, flexible, adaptable, and will carry out tasks outside the job description. I have a track record of achievement. I achieved excellent grades and am often praised for my work speed and how I would get more job done than the average person. Also, I'm excited to apply my skills and continue learning in a professional setting. Elevator Pitch 2024 (AI Voiced) Transcript Hello, I'm Ivan Arias. I recently graduated with certifications in Web Development and Cybersecurity. My passion lies in mastering both fields, and I bring a unique perspective with my background as a geological engineer. Known for my strong interpersonal and team-building skills, I am a completer-finisher who reliably delivers high-quality work on time. My flexibility and adaptability allow me to take on tasks beyond the job description, consistently achieving excellent results. My academic achievements reflect my dedication and efficiency, often surpassing expectations in both speed and quality of work. I am eager to apply my diverse skill set in a professional setting, continuing to learn and grow in the dynamic fields of web development and cybersecurity. Elevator Pitch Practice (Ivan's Voice) Attempt 1 Audio Date Your browser does not support the audio element. 2024-07-10 Feedback \ud83d\ude1e\ud83d\ude15 Several words were mispronounced Attempt 2 Audio Date Your browser does not support the audio element. 2024-07-11 | Feedback \ud83e\udd28 Better, but sounds no natural \ud83e\udd16 . A few words were mispronounced Attempt 3 Audio Date Your browser does not support the audio element. 2024-07-14 Feedback References Developing your elevator pitch. (n.d.). Center for Career Development. https://careerdevelopment.princeton.edu/guides/networking/developing-your-elevator-pitch","title":"Videos & Audios"},{"location":"pitch/#developing-your-elevator-pitch","text":"An elevator pitch is your short (30-60 second) professional introduction. A prepared elevator pitch will help you start a conversation with potential employers, faculty members, alumni and others. (Developing Your Elevator Pitch, n.d.)","title":"Developing Your Elevator Pitch"},{"location":"pitch/#why-you-need-an-elevator-pitch","text":"According to the U.S. Bureau of Labor Statistics, 70% of all jobs are found through networking. By building authentic relationships with professionals, over time you can uncover job opportunities that might not be posted, or possibly create an opportunity that did not previously exist. By engaging in networking activities, it allows you to raise awareness of \u201cyour personal brand\u201d by meeting other professionals and sharing your abilities, skills and background. In turn when people in your network hear about potential opportunities, they may immediately think of you. Your elevator pitch should: Communicate your personal brand and what you want to be known for Convey your unique selling points Answer the questions \u201cTell me about yourself\u2019 \u201cWhat do you do?\u201d and \u201cWhat are you interested in doing next? (Developing Your Elevator Pitch, n.d.).","title":"Why you need an elevator pitch"},{"location":"pitch/#before-you-create-your-pitch-first-think-about","text":"What makes you unique? What are you seeking? What can you offer? What do you want a person to remember about you? (Developing Your Elevator Pitch, n.d.).","title":"Before you create your pitch, first think about:"},{"location":"pitch/#create-your-pitch-in-five-steps","text":"Spend some time thinking about and writing down your top work and school experiences using the STAR Method (Situation, Task, Action and Result). Choose one one-to-two experiences you want to pitch. Shorten each story to a sentence or two focusing on your actions and the results of those actions. Analyze the common themes: What are you good at? What do you like doing? Are you a problem solver, analytical thinker, effective communicator, innovator, etc? Tailoring your pitch for the audience/person you are speaking to and the setting you are in Put it together and make it conversational. Add a question to the end of your description or offer to help someone with something they are working on. (Developing Your Elevator Pitch, n.d.).","title":"Create your pitch in five steps"},{"location":"pitch/#ivans-sample-pitch","text":"","title":"Ivan's Sample Pitch"},{"location":"pitch/#elevator-pitch-2023-ivans-voice","text":"","title":"Elevator Pitch 2023 (Ivan's Voice)"},{"location":"pitch/#transcript","text":"I'm Ivan Arias; I recently graduated with a certification in Web development. I'm passionate about mastering front-end and back-end development. I have a geological background and strong interpersonal and team-building skills. I am a completer-finisher who can be relied upon to complete a job on time and to an excellent standard. I am reliable, flexible, adaptable, and will carry out tasks outside the job description. I have a track record of achievement. I achieved excellent grades and am often praised for my work speed and how I would get more job done than the average person. Also, I'm excited to apply my skills and continue learning in a professional setting.","title":"Transcript"},{"location":"pitch/#elevator-pitch-2024-ai-voiced","text":"","title":"Elevator Pitch 2024 (AI Voiced)"},{"location":"pitch/#transcript_1","text":"Hello, I'm Ivan Arias. I recently graduated with certifications in Web Development and Cybersecurity. My passion lies in mastering both fields, and I bring a unique perspective with my background as a geological engineer. Known for my strong interpersonal and team-building skills, I am a completer-finisher who reliably delivers high-quality work on time. My flexibility and adaptability allow me to take on tasks beyond the job description, consistently achieving excellent results. My academic achievements reflect my dedication and efficiency, often surpassing expectations in both speed and quality of work. I am eager to apply my diverse skill set in a professional setting, continuing to learn and grow in the dynamic fields of web development and cybersecurity.","title":"Transcript"},{"location":"pitch/#elevator-pitch-practice-ivans-voice","text":"","title":"Elevator Pitch Practice (Ivan's Voice)"},{"location":"pitch/#attempt-1","text":"Audio Date Your browser does not support the audio element. 2024-07-10 Feedback \ud83d\ude1e\ud83d\ude15 Several words were mispronounced","title":"Attempt 1"},{"location":"pitch/#attempt-2","text":"Audio Date Your browser does not support the audio element. 2024-07-11 | Feedback \ud83e\udd28 Better, but sounds no natural \ud83e\udd16 . A few words were mispronounced","title":"Attempt 2"},{"location":"pitch/#attempt-3","text":"Audio Date Your browser does not support the audio element. 2024-07-14 Feedback","title":"Attempt 3"},{"location":"pitch/#references","text":"Developing your elevator pitch. (n.d.). Center for Career Development. https://careerdevelopment.princeton.edu/guides/networking/developing-your-elevator-pitch","title":"References"},{"location":"python/","text":"","title":"Python"},{"location":"questions/","text":"Common Behavioral Interview Questions 0. Tell me about yourself Cybersecurity \"I am a confident, fast-working, and attentive team worker who has the necessary skills to keep your organization safe from cyber-attacks and put systems that minimize risk while protecting your assets. I have excellent problem-solving skills, think like a hacker, have broad technical competence, and have excellent communication skills and a passion for continual learning and development. I am comfortable working with different computers and operating systems, and I can troubleshoot quickly and explain situations in plain English so everyone understands. I am highly vigilant and detail-orientated, and I will always work alongside coworkers and people within the organization to ensure we stay ahead of the threats while working to eradicate our vulnerabilities and minimize risk. If you hire me in this cyber security position, you will be getting somebody who is committed to your objectives, a decisive decision maker who puts the needs of the business first, and somebody who will always ensure their technical knowledge and competence are up to speed in this fast-changing environment.\" 1. Tell me about a time when you faced a challenging situation at work. How did you handle it? \"In my previous role, we had a project with a tight deadline, and one of our key team members fell ill. I took the initiative to reorganize our tasks and delegated responsibilities among the remaining team members. I also worked extra hours to cover the gap. We managed to complete the project on time, and our client was very satisfied with the results.\" 2. Describe a time when you had to work with a difficult team member. How did you handle the situation? \"I once worked with a team member who had a very different working style. To address this, I scheduled a one-on-one meeting to understand their perspective and find common ground. We agreed on clear communication channels and set expectations for our collaboration. This improved our teamwork significantly, and we successfully completed our project.\" 3. Can you give an example of a goal you set and how you achieved it? \"I set a goal to improve my public speaking skills to enhance my presentations. I joined a local Toastmasters club and practiced regularly. I also sought feedback from my peers and incorporated their suggestions. Within six months, I noticed a significant improvement in my confidence and delivery, which was reflected in positive feedback from my audience during company presentations.\" 4. Tell me about a time when you had to make a quick decision. What was the outcome? \"During a critical phase of a project, our primary supplier had a sudden shortage of materials. I quickly researched and identified an alternative supplier who could deliver within our timeline. I presented the options to my manager, and we decided to proceed with the new supplier. The materials arrived on time, and we were able to keep the project on track.\" 5. Describe a situation where you had to adapt to a significant change at work. How did you manage it? \"When our company underwent a major software upgrade, it disrupted our usual workflows. I took the initiative to learn the new system by attending training sessions and experimenting with the software. I then organized a workshop for my colleagues to share what I had learned. This proactive approach helped our team adapt quickly and maintain productivity.\" 6. Give an example of how you handled a conflict with a coworker. \"A coworker and I had a disagreement over the direction of a project. I invited them to discuss the issue privately, where we both shared our perspectives. I listened actively and acknowledged their points. We then brainstormed solutions and reached a compromise that incorporated both our ideas. This not only resolved the conflict but also led to a more innovative project outcome.\" 7. Tell me about a time when you demonstrated leadership skills. \"In my previous job, our team leader left unexpectedly, and the project deadline was approaching. I stepped up to lead the team, organizing daily check-ins to track progress and address any issues. I motivated the team by recognizing their efforts and providing support where needed. Under my leadership, we completed the project on time and received praise from management for our teamwork.\" 8. Describe a situation where you went above and beyond your job responsibilities. \"While working on a client project, I noticed some inefficiencies in our process that were causing delays. In my own time, I researched and developed a more streamlined workflow. I presented my findings and proposed changes to my manager, who implemented them. As a result, our team was able to increase productivity and complete projects faster.\"","title":"General"},{"location":"questions/#common-behavioral-interview-questions","text":"","title":"Common Behavioral Interview Questions"},{"location":"questions/#0-tell-me-about-yourself-cybersecurity","text":"\"I am a confident, fast-working, and attentive team worker who has the necessary skills to keep your organization safe from cyber-attacks and put systems that minimize risk while protecting your assets. I have excellent problem-solving skills, think like a hacker, have broad technical competence, and have excellent communication skills and a passion for continual learning and development. I am comfortable working with different computers and operating systems, and I can troubleshoot quickly and explain situations in plain English so everyone understands. I am highly vigilant and detail-orientated, and I will always work alongside coworkers and people within the organization to ensure we stay ahead of the threats while working to eradicate our vulnerabilities and minimize risk. If you hire me in this cyber security position, you will be getting somebody who is committed to your objectives, a decisive decision maker who puts the needs of the business first, and somebody who will always ensure their technical knowledge and competence are up to speed in this fast-changing environment.\"","title":"0. Tell me about yourself Cybersecurity"},{"location":"questions/#1-tell-me-about-a-time-when-you-faced-a-challenging-situation-at-work-how-did-you-handle-it","text":"\"In my previous role, we had a project with a tight deadline, and one of our key team members fell ill. I took the initiative to reorganize our tasks and delegated responsibilities among the remaining team members. I also worked extra hours to cover the gap. We managed to complete the project on time, and our client was very satisfied with the results.\"","title":"1. Tell me about a time when you faced a challenging situation at work. How did you handle it?"},{"location":"questions/#2-describe-a-time-when-you-had-to-work-with-a-difficult-team-member-how-did-you-handle-the-situation","text":"\"I once worked with a team member who had a very different working style. To address this, I scheduled a one-on-one meeting to understand their perspective and find common ground. We agreed on clear communication channels and set expectations for our collaboration. This improved our teamwork significantly, and we successfully completed our project.\"","title":"2. Describe a time when you had to work with a difficult team member. How did you handle the situation?"},{"location":"questions/#3-can-you-give-an-example-of-a-goal-you-set-and-how-you-achieved-it","text":"\"I set a goal to improve my public speaking skills to enhance my presentations. I joined a local Toastmasters club and practiced regularly. I also sought feedback from my peers and incorporated their suggestions. Within six months, I noticed a significant improvement in my confidence and delivery, which was reflected in positive feedback from my audience during company presentations.\"","title":"3. Can you give an example of a goal you set and how you achieved it?"},{"location":"questions/#4-tell-me-about-a-time-when-you-had-to-make-a-quick-decision-what-was-the-outcome","text":"\"During a critical phase of a project, our primary supplier had a sudden shortage of materials. I quickly researched and identified an alternative supplier who could deliver within our timeline. I presented the options to my manager, and we decided to proceed with the new supplier. The materials arrived on time, and we were able to keep the project on track.\"","title":"4. Tell me about a time when you had to make a quick decision. What was the outcome?"},{"location":"questions/#5-describe-a-situation-where-you-had-to-adapt-to-a-significant-change-at-work-how-did-you-manage-it","text":"\"When our company underwent a major software upgrade, it disrupted our usual workflows. I took the initiative to learn the new system by attending training sessions and experimenting with the software. I then organized a workshop for my colleagues to share what I had learned. This proactive approach helped our team adapt quickly and maintain productivity.\"","title":"5. Describe a situation where you had to adapt to a significant change at work. How did you manage it?"},{"location":"questions/#6-give-an-example-of-how-you-handled-a-conflict-with-a-coworker","text":"\"A coworker and I had a disagreement over the direction of a project. I invited them to discuss the issue privately, where we both shared our perspectives. I listened actively and acknowledged their points. We then brainstormed solutions and reached a compromise that incorporated both our ideas. This not only resolved the conflict but also led to a more innovative project outcome.\"","title":"6. Give an example of how you handled a conflict with a coworker."},{"location":"questions/#7-tell-me-about-a-time-when-you-demonstrated-leadership-skills","text":"\"In my previous job, our team leader left unexpectedly, and the project deadline was approaching. I stepped up to lead the team, organizing daily check-ins to track progress and address any issues. I motivated the team by recognizing their efforts and providing support where needed. Under my leadership, we completed the project on time and received praise from management for our teamwork.\"","title":"7. Tell me about a time when you demonstrated leadership skills."},{"location":"questions/#8-describe-a-situation-where-you-went-above-and-beyond-your-job-responsibilities","text":"\"While working on a client project, I noticed some inefficiencies in our process that were causing delays. In my own time, I researched and developed a more streamlined workflow. I presented my findings and proposed changes to my manager, who implemented them. As a result, our team was able to increase productivity and complete projects faster.\"","title":"8. Describe a situation where you went above and beyond your job responsibilities."},{"location":"react/","text":"Core React What is React? React (aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach. React was created by Jordan Walke , a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012. What is the history behind React evolution? The history of ReactJS started in 2010 with the creation of XHP . XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements. The main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user. But there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, the initial prototype of React is created with the name FaxJ by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world. Note: JSX comes from the idea of XHP What are the major features of React? The major features of React are: Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code. It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive. Supports server-side rendering which is useful for Search Engine Optimizations(SEO). Follows Unidirectional or one-way data flow or data binding. Uses reusable/composable UI components to develop the view. What is JSX? JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax. In the example below, the text inside <h1> tag is returned as JavaScript function to the render function. export default function App() { return <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}</h1>; } If you don't use JSX syntax then the respective JavaScript code should be written as below, import { createElement } from \"react\" ; export default function App () { return createElement ( \"h1\" , { className : \"greeting\" }, \"Hello, this is a JSX Code!\" ); } Note: JSX is stricter than HTML What is the difference between Element and Component? An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it cannot be mutated. The JavaScript representation(Without JSX) of React Element would be as follows: const element = React . createElement ( \"div\" , { id : \"login-btn\" }, \"Login\" ); and this element can be simiplified using JSX < div id = \"login-btn\" > Login </ div > The above React.createElement() function returns an object as below: { type : 'div' , props : { children : 'Login' , id : 'login-btn' } } Finally, this element renders to the DOM using ReactDOM.render() . Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output: const Button = ({ handleLogin }) => ( < div id = { \"login-btn\" } onClick = { handleLogin } > Login < /div> ); Then JSX gets transpiled to a React.createElement() function tree: const Button = ({ handleLogin }) => React . createElement ( \"div\" , { id : \"login-btn\" , onClick : handleLogin }, \"Login\" ); How to create components in React? Components are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component. Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the one and only one parameter and return React elements to render the output: function Greeting ({ message }) { return < h1 >{ `Hello, ${ message } ` }</ h1 >; } Class Components: You can also use ES6 class to define a component. The above function component can be written as a class component: class Greeting extends React . Component { render () { return < h1 >{ `Hello, ${ this . props . message } ` }</ h1 >; } } When to use a Class Component over a Function Component? After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too. But even there are two reasons to use Class components over Function components. If you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries. In older versions, If the component needs state or lifecycle methods then you need to use class component. So the summary to this question is as follows: Use Function Components: If you don't need state or lifecycle methods, and your component is purely presentational. For simplicity, readability, and modern code practices, especially with the use of React Hooks for state and side effects. Use Class Components: If you need to manage state or use lifecycle methods. In scenarios where backward compatibility or integration with older code is necessary. Note: You can also use reusable react error boundary third-party component without writing any class. i.e, No need to use class components for Error boundaries. The usage of Error boundaries from the above library is quite straight forward. Note when using react-error-boundary: ErrorBoundary is a client component. You can only pass props to it that are serializeable or use it in files that have a \"use client\"; directive. \"use client\" ; import { ErrorBoundary } from \"react-error-boundary\" ; < ErrorBoundary fallback = {< div > Something went wrong </ div >}> < ExampleApplication /> </ ErrorBoundary >; What are Pure Components? Pure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations. But at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary rendering by default when you set the same state again. The syntactic representation of memoized components looks like below, const MemoizedComponent = memo ( SomeComponent , arePropsEqual ? ); Below is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm). import { memo , useState } from \"react\" ; const EmployeeProfile = memo ( function EmployeeProfile ({ name , email }) { return ( <> < p > Name : { name }</ p > < p > Email : { email }</ p > </> ); }); export default function EmployeeRegForm () { const [ name , setName ] = useState ( \"\" ); const [ email , setEmail ] = useState ( \"\" ); return ( <> < label > Name : { \" \" } < input value = { name } onChange = {( e ) => setName ( e . target . value )} /> </ label > < label > Email : { \" \" } < input value = { email } onChange = {( e ) => setEmail ( e . target . value )} /> </ label > < hr /> < EmployeeProfile name = { name } /> </> ); } In the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change. In class components, the components extending React.PureComponent instead of React.Component become the pure components. When props or state changes, PureComponent will do a shallow comparison on both props and state by invoking shouldComponentUpdate() lifecycle method. Note: React.memo() is a higher-order component. What is state in React? State of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components. Let's take an example of User component with message state. Here, useState hook has been used to add state to the User component and it returns an array with current state and function to update it. import { useState } from \"react\" ; function User () { const [ message , setMessage ] = useState ( \"Welcome to React world\" ); return ( < div > < h1 >{ message }</ h1 > </ div > ); } Whenever React calls your component or access useState hook, it gives you a snapshot of the state for that particular render. See Class import React from \"react\" ; class User extends React . Component { constructor ( props ) { super ( props ); this . state = { message : \"Welcome to React world\" , }; } render () { return ( < div > < h1 >{ this . state . message }</ h1 > </ div > ); } } State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it. What are props in React? Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component. The primary purpose of props in React is to provide following component functionality: Pass custom data to your component. Trigger state changes. Use via this.props.reactProp inside component's render() method. For example, let us create an element with reactProp property: < Element reactProp = { \"1\" } /> This reactProp (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library. props . reactProp ; For example, the usage of props in function component looks like below: import React from \"react\" ; import ReactDOM from \"react-dom\" ; const ChildComponent = ( props ) => { return ( < div > < p >{ props . name }</ p > < p >{ props . age }</ p > < p >{ props . gender }</ p > </ div > ); }; const ParentComponent = () => { return ( < div > < ChildComponent name = \"John\" age = \"30\" gender = \"male\" /> < ChildComponent name = \"Mary\" age = \"25\" geneder = \"female\" /> </ div > ); }; The properties from props object can be accessed directly using destructing feature from ES6 (ECMAScript 2015). It is also possible to fallback to default value when the prop value is not specified. The above child component can be simplified like below. const ChildComponent = ({ name , age , gender = \"male\" }) => { return ( < div > < p >{ name }</ p > < p >{ age }</ p > < p >{ gender }</ p > </ div > ); }; Note: The default value won't be used if you pass null or 0 value. i.e, default value is only used if the prop value is missed or undefined value has been passed. See Class The Props accessed in Class Based Component as below import React from \"react\" ; import ReactDOM from \"react-dom\" ; class ChildComponent extends React . Component { render () { return ( < div > < p >{ this . props . name }</ p > < p >{ this . props . age }</ p > < p >{ this . props . gender }</ p > </ div > ); } } class ParentComponent extends React . Component { render () { return ( < div > < ChildComponent name = \"John\" age = \"30\" gender = \"male\" /> < ChildComponent name = \"Mary\" age = \"25\" gender = \"female\" /> </ div > ); } } What is the difference between state and props? In React, both state and props are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and have different characteristics. The state entity is managed by the component itself and can be updated using the setter( setState() for class components) function. Unlike props, state can be modified by the component and is used to manage the internal state of the component. Moreover, changes in the state trigger a re-render of the component and its children. The components cannot become reusable with the usage of state alone. On the otherhand, props (short for \"properties\") are passed to a component by its parent component and are read-only , meaning that they cannot be modified by the own component itself. Also, props can be used to configure the behavior of a component and to pass data between components. The components become reusable with the usage of props. What is the difference between HTML and React event handling? Below are some of the main differences between HTML and React event handling, In HTML, the event name usually represents in lowercase as a convention: < button onclick = \"activateLasers()\" ></ button > Whereas in React it follows camelCase convention: < button onClick = { activateLasers }> In HTML, you can return false to prevent default behavior: < a href = \"#\" onclick = 'console.log(\"The link was clicked.\"); return false;' /> Whereas in React you must call preventDefault() explicitly: function handleClick ( event ) { event . preventDefault (); console . log ( \"The link was clicked.\" ); } In HTML, you need to invoke the function by appending () Whereas in react you should not append () with the function name. (refer \"activateLasers\" function in the first point for example) What are synthetic events in React? SyntheticEvent is a cross-browser wrapper around the browser's native event. Its API is same as the browser's native event, including stopPropagation() and preventDefault() , except the events work identically across all browsers. The native events can be accessed directly from synthetic events using nativeEvent attribute. Let's take an example of BookStore title search component with the ability to get all native event properties function BookStore () { function handleTitleChange ( e ) { console . log ( \"The new title is:\" , e . target . value ); // 'e' represents synthetic event const nativeEvent = e . nativeEvent ; console . log ( nativeEvent ); e . stopPropagation (); e . preventDefault (); } return < input name = \"title\" onChange = { handleTitleChange } /> ; } What are inline conditional expressions? You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator && . < h1 > Hello ! </ h1 >; { messages . length > 0 && ! isLogin ? ( < h2 > You have { messages . length } unread messages .</ h2 > ) : ( < h2 > You don ' t have unread messages .</ h2 > ); } What is \"key\" prop and what is the benefit of using it in arrays of elements? A key is a special attribute you should include when mapping over arrays to render data. Key prop helps React identify which items have changed, are added, or are removed. Keys should be unique among its siblings. Most often we use ID from our data as key : const todoItems = todos . map (( todo ) => < li key = { todo . id }>{ todo . text }</ li >); When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort: const todoItems = todos . map (( todo , index ) => ( < li key = { index }>{ todo . text }</ li > )); Note: Using indexes for keys is not recommended if the order of items may change. This can negatively impact performance and may cause issues with component state. If you extract list item as separate component then apply keys on list component instead of li tag. There will be a warning message in the console if the key prop is not present on list items. The key attribute accepts either string or number and internally convert it as string type. Don't generate the key on the fly something like key={Math.random()} . Because the keys will never match up between re-renders and DOM created everytime. What is Virtual DOM? The Virtual DOM (VDOM) is an in-memory representation of Real DOM . The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation . How Virtual DOM works? What is the difference between Shadow DOM and Virtual DOM? The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components . The Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs. What is React Fiber? Fiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives. What is the main goal of React Fiber? The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering : the ability to split rendering work into chunks and spread it out over multiple frames. from documentation Its main goals are: Ability to split interruptible work in chunks. Ability to prioritize, rebase and reuse work in progress. Ability to yield back and forth between parents and children to support layout in React. Ability to return multiple elements from render(). Better support for error boundaries.","title":"React"},{"location":"react/#core-react","text":"","title":"Core React"},{"location":"react/#what-is-react","text":"React (aka React.js or ReactJS) is an open-source front-end JavaScript library that is used for building composable user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach. React was created by Jordan Walke , a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.","title":"What is React?"},{"location":"react/#what-is-the-history-behind-react-evolution","text":"The history of ReactJS started in 2010 with the creation of XHP . XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements. The main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user. But there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, the initial prototype of React is created with the name FaxJ by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world. Note: JSX comes from the idea of XHP","title":"What is the history behind React evolution?"},{"location":"react/#what-are-the-major-features-of-react","text":"The major features of React are: Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code. It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive. Supports server-side rendering which is useful for Search Engine Optimizations(SEO). Follows Unidirectional or one-way data flow or data binding. Uses reusable/composable UI components to develop the view.","title":"What are the major features of React?"},{"location":"react/#what-is-jsx","text":"JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax. In the example below, the text inside <h1> tag is returned as JavaScript function to the render function. export default function App() { return <h1 className=\"greeting\">{\"Hello, this is a JSX Code!\"}</h1>; } If you don't use JSX syntax then the respective JavaScript code should be written as below, import { createElement } from \"react\" ; export default function App () { return createElement ( \"h1\" , { className : \"greeting\" }, \"Hello, this is a JSX Code!\" ); } Note: JSX is stricter than HTML","title":"What is JSX?"},{"location":"react/#what-is-the-difference-between-element-and-component","text":"An Element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other Elements in their props. Creating a React element is cheap. Once an element is created, it cannot be mutated. The JavaScript representation(Without JSX) of React Element would be as follows: const element = React . createElement ( \"div\" , { id : \"login-btn\" }, \"Login\" ); and this element can be simiplified using JSX < div id = \"login-btn\" > Login </ div > The above React.createElement() function returns an object as below: { type : 'div' , props : { children : 'Login' , id : 'login-btn' } } Finally, this element renders to the DOM using ReactDOM.render() . Whereas a component can be declared in several different ways. It can be a class with a render() method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output: const Button = ({ handleLogin }) => ( < div id = { \"login-btn\" } onClick = { handleLogin } > Login < /div> ); Then JSX gets transpiled to a React.createElement() function tree: const Button = ({ handleLogin }) => React . createElement ( \"div\" , { id : \"login-btn\" , onClick : handleLogin }, \"Login\" );","title":"What is the difference between Element and Component?"},{"location":"react/#how-to-create-components-in-react","text":"Components are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component. Function Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the one and only one parameter and return React elements to render the output: function Greeting ({ message }) { return < h1 >{ `Hello, ${ message } ` }</ h1 >; } Class Components: You can also use ES6 class to define a component. The above function component can be written as a class component: class Greeting extends React . Component { render () { return < h1 >{ `Hello, ${ this . props . message } ` }</ h1 >; } }","title":"How to create components in React?"},{"location":"react/#when-to-use-a-class-component-over-a-function-component","text":"After the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too. But even there are two reasons to use Class components over Function components. If you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries. In older versions, If the component needs state or lifecycle methods then you need to use class component. So the summary to this question is as follows: Use Function Components: If you don't need state or lifecycle methods, and your component is purely presentational. For simplicity, readability, and modern code practices, especially with the use of React Hooks for state and side effects. Use Class Components: If you need to manage state or use lifecycle methods. In scenarios where backward compatibility or integration with older code is necessary. Note: You can also use reusable react error boundary third-party component without writing any class. i.e, No need to use class components for Error boundaries. The usage of Error boundaries from the above library is quite straight forward. Note when using react-error-boundary: ErrorBoundary is a client component. You can only pass props to it that are serializeable or use it in files that have a \"use client\"; directive. \"use client\" ; import { ErrorBoundary } from \"react-error-boundary\" ; < ErrorBoundary fallback = {< div > Something went wrong </ div >}> < ExampleApplication /> </ ErrorBoundary >;","title":"When to use a Class Component over a Function Component?"},{"location":"react/#what-are-pure-components","text":"Pure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized React.memo() API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations. But at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary rendering by default when you set the same state again. The syntactic representation of memoized components looks like below, const MemoizedComponent = memo ( SomeComponent , arePropsEqual ? ); Below is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm). import { memo , useState } from \"react\" ; const EmployeeProfile = memo ( function EmployeeProfile ({ name , email }) { return ( <> < p > Name : { name }</ p > < p > Email : { email }</ p > </> ); }); export default function EmployeeRegForm () { const [ name , setName ] = useState ( \"\" ); const [ email , setEmail ] = useState ( \"\" ); return ( <> < label > Name : { \" \" } < input value = { name } onChange = {( e ) => setName ( e . target . value )} /> </ label > < label > Email : { \" \" } < input value = { email } onChange = {( e ) => setEmail ( e . target . value )} /> </ label > < hr /> < EmployeeProfile name = { name } /> </> ); } In the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change. In class components, the components extending React.PureComponent instead of React.Component become the pure components. When props or state changes, PureComponent will do a shallow comparison on both props and state by invoking shouldComponentUpdate() lifecycle method. Note: React.memo() is a higher-order component.","title":"What are Pure Components?"},{"location":"react/#what-is-state-in-react","text":"State of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components. Let's take an example of User component with message state. Here, useState hook has been used to add state to the User component and it returns an array with current state and function to update it. import { useState } from \"react\" ; function User () { const [ message , setMessage ] = useState ( \"Welcome to React world\" ); return ( < div > < h1 >{ message }</ h1 > </ div > ); } Whenever React calls your component or access useState hook, it gives you a snapshot of the state for that particular render. See Class import React from \"react\" ; class User extends React . Component { constructor ( props ) { super ( props ); this . state = { message : \"Welcome to React world\" , }; } render () { return ( < div > < h1 >{ this . state . message }</ h1 > </ div > ); } } State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.","title":"What is state in React?"},{"location":"react/#what-are-props-in-react","text":"Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component. The primary purpose of props in React is to provide following component functionality: Pass custom data to your component. Trigger state changes. Use via this.props.reactProp inside component's render() method. For example, let us create an element with reactProp property: < Element reactProp = { \"1\" } /> This reactProp (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library. props . reactProp ; For example, the usage of props in function component looks like below: import React from \"react\" ; import ReactDOM from \"react-dom\" ; const ChildComponent = ( props ) => { return ( < div > < p >{ props . name }</ p > < p >{ props . age }</ p > < p >{ props . gender }</ p > </ div > ); }; const ParentComponent = () => { return ( < div > < ChildComponent name = \"John\" age = \"30\" gender = \"male\" /> < ChildComponent name = \"Mary\" age = \"25\" geneder = \"female\" /> </ div > ); }; The properties from props object can be accessed directly using destructing feature from ES6 (ECMAScript 2015). It is also possible to fallback to default value when the prop value is not specified. The above child component can be simplified like below. const ChildComponent = ({ name , age , gender = \"male\" }) => { return ( < div > < p >{ name }</ p > < p >{ age }</ p > < p >{ gender }</ p > </ div > ); }; Note: The default value won't be used if you pass null or 0 value. i.e, default value is only used if the prop value is missed or undefined value has been passed. See Class The Props accessed in Class Based Component as below import React from \"react\" ; import ReactDOM from \"react-dom\" ; class ChildComponent extends React . Component { render () { return ( < div > < p >{ this . props . name }</ p > < p >{ this . props . age }</ p > < p >{ this . props . gender }</ p > </ div > ); } } class ParentComponent extends React . Component { render () { return ( < div > < ChildComponent name = \"John\" age = \"30\" gender = \"male\" /> < ChildComponent name = \"Mary\" age = \"25\" gender = \"female\" /> </ div > ); } }","title":"What are props in React?"},{"location":"react/#what-is-the-difference-between-state-and-props","text":"In React, both state and props are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and have different characteristics. The state entity is managed by the component itself and can be updated using the setter( setState() for class components) function. Unlike props, state can be modified by the component and is used to manage the internal state of the component. Moreover, changes in the state trigger a re-render of the component and its children. The components cannot become reusable with the usage of state alone. On the otherhand, props (short for \"properties\") are passed to a component by its parent component and are read-only , meaning that they cannot be modified by the own component itself. Also, props can be used to configure the behavior of a component and to pass data between components. The components become reusable with the usage of props.","title":"What is the difference between state and props?"},{"location":"react/#what-is-the-difference-between-html-and-react-event-handling","text":"Below are some of the main differences between HTML and React event handling, In HTML, the event name usually represents in lowercase as a convention: < button onclick = \"activateLasers()\" ></ button > Whereas in React it follows camelCase convention: < button onClick = { activateLasers }> In HTML, you can return false to prevent default behavior: < a href = \"#\" onclick = 'console.log(\"The link was clicked.\"); return false;' /> Whereas in React you must call preventDefault() explicitly: function handleClick ( event ) { event . preventDefault (); console . log ( \"The link was clicked.\" ); } In HTML, you need to invoke the function by appending () Whereas in react you should not append () with the function name. (refer \"activateLasers\" function in the first point for example)","title":"What is the difference between HTML and React event handling?"},{"location":"react/#what-are-synthetic-events-in-react","text":"SyntheticEvent is a cross-browser wrapper around the browser's native event. Its API is same as the browser's native event, including stopPropagation() and preventDefault() , except the events work identically across all browsers. The native events can be accessed directly from synthetic events using nativeEvent attribute. Let's take an example of BookStore title search component with the ability to get all native event properties function BookStore () { function handleTitleChange ( e ) { console . log ( \"The new title is:\" , e . target . value ); // 'e' represents synthetic event const nativeEvent = e . nativeEvent ; console . log ( nativeEvent ); e . stopPropagation (); e . preventDefault (); } return < input name = \"title\" onChange = { handleTitleChange } /> ; }","title":"What are synthetic events in React?"},{"location":"react/#what-are-inline-conditional-expressions","text":"You can use either if statements or ternary expressions which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator && . < h1 > Hello ! </ h1 >; { messages . length > 0 && ! isLogin ? ( < h2 > You have { messages . length } unread messages .</ h2 > ) : ( < h2 > You don ' t have unread messages .</ h2 > ); }","title":"What are inline conditional expressions?"},{"location":"react/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements","text":"A key is a special attribute you should include when mapping over arrays to render data. Key prop helps React identify which items have changed, are added, or are removed. Keys should be unique among its siblings. Most often we use ID from our data as key : const todoItems = todos . map (( todo ) => < li key = { todo . id }>{ todo . text }</ li >); When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort: const todoItems = todos . map (( todo , index ) => ( < li key = { index }>{ todo . text }</ li > )); Note: Using indexes for keys is not recommended if the order of items may change. This can negatively impact performance and may cause issues with component state. If you extract list item as separate component then apply keys on list component instead of li tag. There will be a warning message in the console if the key prop is not present on list items. The key attribute accepts either string or number and internally convert it as string type. Don't generate the key on the fly something like key={Math.random()} . Because the keys will never match up between re-renders and DOM created everytime.","title":"What is \"key\" prop and what is the benefit of using it in arrays of elements?"},{"location":"react/#what-is-virtual-dom","text":"The Virtual DOM (VDOM) is an in-memory representation of Real DOM . The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation .","title":"What is Virtual DOM?"},{"location":"react/#how-virtual-dom-works","text":"","title":"How Virtual DOM works?"},{"location":"react/#what-is-the-difference-between-shadow-dom-and-virtual-dom","text":"The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components . The Virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.","title":"What is the difference between Shadow DOM and Virtual DOM?"},{"location":"react/#what-is-react-fiber","text":"Fiber is the new reconciliation engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.","title":"What is React Fiber?"},{"location":"react/#what-is-the-main-goal-of-react-fiber","text":"The goal of React Fiber is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is incremental rendering : the ability to split rendering work into chunks and spread it out over multiple frames. from documentation Its main goals are: Ability to split interruptible work in chunks. Ability to prioritize, rebase and reuse work in progress. Ability to yield back and forth between parents and children to support layout in React. Ability to return multiple elements from render(). Better support for error boundaries.","title":"What is the main goal of React Fiber?"},{"location":"resume/","text":"Walk me through your resume. Thank you for the opportunity to discuss my background. My name is Ivan Arias, and I am based in Orlando, Florida. I am a Full-Stack Application Developer with strong proficiency in Python, Flask, and JavaScript-based programming, complemented by a background in geological modeling and Geographic Information System (GIS). I also possess strong interpersonal and team-building skills, which I aim to leverage in an innovative and collaborative team setting to create cutting-edge software solutions that enhance business productivity. In addition to my development skills, I have expanded my expertise in cybersecurity and cloud technologies. I have hands-on experience with cloud platforms and services, as well as knowledge of cybersecurity principles, practices, and tools necessary to protect and secure digital assets. Employment History Amazon (Orlando, FL) - Fulfillment Associate (Nov 2020 - Present) - Established safety protocols that reduced workplace accidents. - Ensured accurate scanning and sorting of merchandise, contributing to efficient operations. - Identified performance shortcomings, leading to increased production in the packing-flow department. PDVSA (Barcelona, Venezuela) - Sedimentologist and Stratigrapher (Jan 2005 - Jan 2019) - Analyzed sedimentary rocks to make precise model predictions of hydrocarbon reservoirs. - Conducted geostatistical modeling and GIS-based thematic mapping. Technical Projects Hacking Mr. Robot : The Mr. Robot VM is a purposely built vulnerable environment that simulates real-world scenarios. It is inspired by the TV series \"Mr. Robot\" and contains multiple vulnerabilities that can be exploited to practice and enhance penetration testing skills. Student Performance Dashboard : This project creates an interactive dashboard to visualize and analyze the grades of high school students over time. The dashboard is built using Python, Dash, and Plotly, with Bootstrap for styling. Audits Tool : The Audits Tool is a React-based application designed to enhance the efficiency of audit data management. It offers a user-friendly interface for storing and managing audit details, such as usernames, process paths, and audit descriptions. This information is saved in a Firebase database and can be easily viewed or deleted as needed. E-commerce Platform : This project features a React.js front end and Flask back end. It includes full CRUD actions and is deployed on a PostgreSQL database using Render. Database Tool (DT) : This tool, built with SQLAlchemy, SQLite3, and a CLI using Click, manages US entities with an intuitive color-coded menu for CRUD operations. Relevant Skills Frontend : React, React Router, Bootstrap, JavaScript Backend : Python, Flask, SQL, SqlAlchemy, Alembic Cloud : AWS CDK, AWS Boto3, AWS Solutions Architecture, cloud services Cybersecurity : Metasploit, Penetration Testing, Burp Suite, Wireshark, Kali Linux Other Tools : CSS, Sass, Figma, Dash-Plotly Education and Courses Flatiron School | online (Orlando, FL) : Completed a Full Stack Web Development program focusing on Python with Flask and JavaScript from February 2023 to October 2023. Cloud Mastery Bootcamp | online (USA) : Currently enrolled in the Cloud Mastery Bootcamp at Digital Cloud Training, which runs from February 2024 to September 2024, where I am gaining hands-on experience with cloud platforms and services. Fullstack Academy Cyber Bootcamp | online (USA) : Currently enrolled in the Fullstack Academy Cyber Bootcamp, which runs from January 2024 to July 2024, where I am acquiring knowledge of cybersecurity principles, practices, and tools necessary to protect and secure digital assets. Additional Courses : Python and DevOps on AWS Bootcamp : May 2024 AWS Solutions Architecture Bootcamp : March 2024 Cloud Foundations and Linux Bootcamp : February 2024 Intensive English Program (IEP) | Valencia College : Enhanced my language skills to achieve professional working proficiency in English. Languages Spanish : Native proficiency English : Professional working proficiency French : Elementary proficiency Closing Statement In summary, my technical skills, diverse project experience, varied professional background, continuous educational pursuits in cybersecurity and cloud technologies, and multilingual abilities have equipped me with a unique perspective and a robust toolkit for addressing complex software development challenges. I am excited to bring my expertise to a dynamic team where I can continue to grow and contribute to impactful projects. Video","title":"Resume"},{"location":"resume/#walk-me-through-your-resume","text":"Thank you for the opportunity to discuss my background. My name is Ivan Arias, and I am based in Orlando, Florida. I am a Full-Stack Application Developer with strong proficiency in Python, Flask, and JavaScript-based programming, complemented by a background in geological modeling and Geographic Information System (GIS). I also possess strong interpersonal and team-building skills, which I aim to leverage in an innovative and collaborative team setting to create cutting-edge software solutions that enhance business productivity. In addition to my development skills, I have expanded my expertise in cybersecurity and cloud technologies. I have hands-on experience with cloud platforms and services, as well as knowledge of cybersecurity principles, practices, and tools necessary to protect and secure digital assets.","title":"Walk me through your resume."},{"location":"resume/#employment-history","text":"Amazon (Orlando, FL) - Fulfillment Associate (Nov 2020 - Present) - Established safety protocols that reduced workplace accidents. - Ensured accurate scanning and sorting of merchandise, contributing to efficient operations. - Identified performance shortcomings, leading to increased production in the packing-flow department. PDVSA (Barcelona, Venezuela) - Sedimentologist and Stratigrapher (Jan 2005 - Jan 2019) - Analyzed sedimentary rocks to make precise model predictions of hydrocarbon reservoirs. - Conducted geostatistical modeling and GIS-based thematic mapping.","title":"Employment History"},{"location":"resume/#technical-projects","text":"Hacking Mr. Robot : The Mr. Robot VM is a purposely built vulnerable environment that simulates real-world scenarios. It is inspired by the TV series \"Mr. Robot\" and contains multiple vulnerabilities that can be exploited to practice and enhance penetration testing skills. Student Performance Dashboard : This project creates an interactive dashboard to visualize and analyze the grades of high school students over time. The dashboard is built using Python, Dash, and Plotly, with Bootstrap for styling. Audits Tool : The Audits Tool is a React-based application designed to enhance the efficiency of audit data management. It offers a user-friendly interface for storing and managing audit details, such as usernames, process paths, and audit descriptions. This information is saved in a Firebase database and can be easily viewed or deleted as needed. E-commerce Platform : This project features a React.js front end and Flask back end. It includes full CRUD actions and is deployed on a PostgreSQL database using Render. Database Tool (DT) : This tool, built with SQLAlchemy, SQLite3, and a CLI using Click, manages US entities with an intuitive color-coded menu for CRUD operations.","title":"Technical Projects"},{"location":"resume/#relevant-skills","text":"Frontend : React, React Router, Bootstrap, JavaScript Backend : Python, Flask, SQL, SqlAlchemy, Alembic Cloud : AWS CDK, AWS Boto3, AWS Solutions Architecture, cloud services Cybersecurity : Metasploit, Penetration Testing, Burp Suite, Wireshark, Kali Linux Other Tools : CSS, Sass, Figma, Dash-Plotly","title":"Relevant Skills"},{"location":"resume/#education-and-courses","text":"Flatiron School | online (Orlando, FL) : Completed a Full Stack Web Development program focusing on Python with Flask and JavaScript from February 2023 to October 2023. Cloud Mastery Bootcamp | online (USA) : Currently enrolled in the Cloud Mastery Bootcamp at Digital Cloud Training, which runs from February 2024 to September 2024, where I am gaining hands-on experience with cloud platforms and services. Fullstack Academy Cyber Bootcamp | online (USA) : Currently enrolled in the Fullstack Academy Cyber Bootcamp, which runs from January 2024 to July 2024, where I am acquiring knowledge of cybersecurity principles, practices, and tools necessary to protect and secure digital assets.","title":"Education and Courses"},{"location":"resume/#additional-courses","text":"Python and DevOps on AWS Bootcamp : May 2024 AWS Solutions Architecture Bootcamp : March 2024 Cloud Foundations and Linux Bootcamp : February 2024 Intensive English Program (IEP) | Valencia College : Enhanced my language skills to achieve professional working proficiency in English.","title":"Additional Courses:"},{"location":"resume/#languages","text":"Spanish : Native proficiency English : Professional working proficiency French : Elementary proficiency","title":"Languages"},{"location":"resume/#closing-statement","text":"In summary, my technical skills, diverse project experience, varied professional background, continuous educational pursuits in cybersecurity and cloud technologies, and multilingual abilities have equipped me with a unique perspective and a robust toolkit for addressing complex software development challenges. I am excited to bring my expertise to a dynamic team where I can continue to grow and contribute to impactful projects.","title":"Closing Statement"},{"location":"resume/#video","text":"","title":"Video"},{"location":"star/","text":"Behavioral Interview Questions with STAR Method Answers 1. Question: Tell me about a time when you had to meet a tight deadline. How did you handle it? Situation : In my previous role as a project manager, we had a client who moved up the deadline for a major project by two weeks. Task : My task was to ensure that our team could meet this new deadline without compromising the quality of our work. Action : I immediately called a team meeting to discuss the new deadline and reassess our current progress. I delegated tasks more efficiently and identified key areas where we could save time. I also communicated closely with the client to manage their expectations and provide regular updates. Result : We successfully met the new deadline, and the client was very satisfied with the quality of our work. This led to an extended contract and a positive recommendation from the client. 2. Question: Describe a time when you had to resolve a conflict within your team. Situation : During a project, two team members had a disagreement over the direction of a critical task. Task : My task was to mediate the conflict and ensure that the project continued smoothly. Action : I scheduled a private meeting with both individuals to understand their perspectives. After hearing both sides, I facilitated a discussion to find common ground. We agreed on a compromise that incorporated elements from both viewpoints and set clear roles and responsibilities. Result : The conflict was resolved, and the team members were able to collaborate more effectively. The project was completed on time, and the quality of the final deliverable exceeded client expectations. 3. Question: Can you give an example of a goal you set and how you achieved it? Situation : I noticed that our team's project reports were often late, causing delays in decision-making. Task : My task was to improve the timeliness of our project reporting process. Action : I set a goal to reduce report submission times by 50% within three months. I introduced a new project management tool to streamline our workflow and conducted training sessions for the team. I also implemented a weekly check-in system to monitor progress. Result : Within three months, we reduced report submission times by 60%. The timely reports allowed for quicker decision-making, and overall project efficiency improved significantly. 4. Question: Tell me about a time when you had to make a quick decision. What was the outcome? Situation : During a critical phase of a project, our primary supplier had a sudden shortage of materials. Task : I needed to find an alternative supplier quickly to avoid project delays. Action : I quickly researched and identified an alternative supplier who could deliver within our timeline. I presented the options to my manager, and we decided to proceed with the new supplier. Result : The materials arrived on time, and we were able to keep the project on track. This quick decision prevented potential delays and ensured client satisfaction. 5. Question: Describe a situation where you had to adapt to a significant change at work. How did you manage it? Situation : When our company underwent a major software upgrade, it disrupted our usual workflows. Task : My task was to adapt to the new software and ensure my team could continue working efficiently. Action : I took the initiative to learn the new system by attending training sessions and experimenting with the software. I then organized a workshop for my colleagues to share what I had learned. Result : This proactive approach helped our team adapt quickly and maintain productivity. Our transition to the new software was smooth, and we continued to meet our project deadlines. 6. Question: Give an example of how you handled a conflict with a coworker. Situation : A coworker and I had a disagreement over the direction of a project. Task : I needed to resolve the conflict and find a way to work together effectively. Action : I invited them to discuss the issue privately, where we both shared our perspectives. I listened actively and acknowledged their points. We then brainstormed solutions and reached a compromise that incorporated both our ideas. Result : This not only resolved the conflict but also led to a more innovative project outcome. Our improved collaboration contributed to the project's success. 7. Question: Tell me about a time when you demonstrated leadership skills. Situation : In my previous job, our team leader left unexpectedly, and the project deadline was approaching. Task : I needed to step up and lead the team to ensure the project stayed on track. Action : I organized daily check-ins to track progress and address any issues. I motivated the team by recognizing their efforts and providing support where needed. Result : Under my leadership, we completed the project on time and received praise from management for our teamwork. 8. Question: Describe a situation where you went above and beyond your job responsibilities. Situation : While working on a client project, I noticed some inefficiencies in our process that were causing delays. Task : I wanted to improve our process to increase productivity. Action : In my own time, I researched and developed a more streamlined workflow. I presented my findings and proposed changes to my manager, who implemented them. Result : As a result, our team was able to increase productivity and complete projects faster. These example answers demonstrate how to structure responses using the STAR method (Situation, Task, Action, Result), which provides a clear and concise way to showcase past behavior and its positive outcomes. Video","title":"STAR Method"},{"location":"star/#behavioral-interview-questions-with-star-method-answers","text":"","title":"Behavioral Interview Questions with STAR Method Answers"},{"location":"star/#1-question-tell-me-about-a-time-when-you-had-to-meet-a-tight-deadline-how-did-you-handle-it","text":"Situation : In my previous role as a project manager, we had a client who moved up the deadline for a major project by two weeks. Task : My task was to ensure that our team could meet this new deadline without compromising the quality of our work. Action : I immediately called a team meeting to discuss the new deadline and reassess our current progress. I delegated tasks more efficiently and identified key areas where we could save time. I also communicated closely with the client to manage their expectations and provide regular updates. Result : We successfully met the new deadline, and the client was very satisfied with the quality of our work. This led to an extended contract and a positive recommendation from the client.","title":"1. Question: Tell me about a time when you had to meet a tight deadline. How did you handle it?"},{"location":"star/#2-question-describe-a-time-when-you-had-to-resolve-a-conflict-within-your-team","text":"Situation : During a project, two team members had a disagreement over the direction of a critical task. Task : My task was to mediate the conflict and ensure that the project continued smoothly. Action : I scheduled a private meeting with both individuals to understand their perspectives. After hearing both sides, I facilitated a discussion to find common ground. We agreed on a compromise that incorporated elements from both viewpoints and set clear roles and responsibilities. Result : The conflict was resolved, and the team members were able to collaborate more effectively. The project was completed on time, and the quality of the final deliverable exceeded client expectations.","title":"2. Question: Describe a time when you had to resolve a conflict within your team."},{"location":"star/#3-question-can-you-give-an-example-of-a-goal-you-set-and-how-you-achieved-it","text":"Situation : I noticed that our team's project reports were often late, causing delays in decision-making. Task : My task was to improve the timeliness of our project reporting process. Action : I set a goal to reduce report submission times by 50% within three months. I introduced a new project management tool to streamline our workflow and conducted training sessions for the team. I also implemented a weekly check-in system to monitor progress. Result : Within three months, we reduced report submission times by 60%. The timely reports allowed for quicker decision-making, and overall project efficiency improved significantly.","title":"3. Question: Can you give an example of a goal you set and how you achieved it?"},{"location":"star/#4-question-tell-me-about-a-time-when-you-had-to-make-a-quick-decision-what-was-the-outcome","text":"Situation : During a critical phase of a project, our primary supplier had a sudden shortage of materials. Task : I needed to find an alternative supplier quickly to avoid project delays. Action : I quickly researched and identified an alternative supplier who could deliver within our timeline. I presented the options to my manager, and we decided to proceed with the new supplier. Result : The materials arrived on time, and we were able to keep the project on track. This quick decision prevented potential delays and ensured client satisfaction.","title":"4. Question: Tell me about a time when you had to make a quick decision. What was the outcome?"},{"location":"star/#5-question-describe-a-situation-where-you-had-to-adapt-to-a-significant-change-at-work-how-did-you-manage-it","text":"Situation : When our company underwent a major software upgrade, it disrupted our usual workflows. Task : My task was to adapt to the new software and ensure my team could continue working efficiently. Action : I took the initiative to learn the new system by attending training sessions and experimenting with the software. I then organized a workshop for my colleagues to share what I had learned. Result : This proactive approach helped our team adapt quickly and maintain productivity. Our transition to the new software was smooth, and we continued to meet our project deadlines.","title":"5. Question: Describe a situation where you had to adapt to a significant change at work. How did you manage it?"},{"location":"star/#6-question-give-an-example-of-how-you-handled-a-conflict-with-a-coworker","text":"Situation : A coworker and I had a disagreement over the direction of a project. Task : I needed to resolve the conflict and find a way to work together effectively. Action : I invited them to discuss the issue privately, where we both shared our perspectives. I listened actively and acknowledged their points. We then brainstormed solutions and reached a compromise that incorporated both our ideas. Result : This not only resolved the conflict but also led to a more innovative project outcome. Our improved collaboration contributed to the project's success.","title":"6. Question: Give an example of how you handled a conflict with a coworker."},{"location":"star/#7-question-tell-me-about-a-time-when-you-demonstrated-leadership-skills","text":"Situation : In my previous job, our team leader left unexpectedly, and the project deadline was approaching. Task : I needed to step up and lead the team to ensure the project stayed on track. Action : I organized daily check-ins to track progress and address any issues. I motivated the team by recognizing their efforts and providing support where needed. Result : Under my leadership, we completed the project on time and received praise from management for our teamwork.","title":"7. Question: Tell me about a time when you demonstrated leadership skills."},{"location":"star/#8-question-describe-a-situation-where-you-went-above-and-beyond-your-job-responsibilities","text":"Situation : While working on a client project, I noticed some inefficiencies in our process that were causing delays. Task : I wanted to improve our process to increase productivity. Action : In my own time, I researched and developed a more streamlined workflow. I presented my findings and proposed changes to my manager, who implemented them. Result : As a result, our team was able to increase productivity and complete projects faster. These example answers demonstrate how to structure responses using the STAR method (Situation, Task, Action, Result), which provides a clear and concise way to showcase past behavior and its positive outcomes.","title":"8. Question: Describe a situation where you went above and beyond your job responsibilities."},{"location":"star/#video","text":"","title":"Video"},{"location":"system/","text":"","title":"Network Systems"},{"location":"vanilla/","text":"Vanilla JS Questions 1. What is JavaScript? JavaScript is a versatile and widely-used programming language primarily used for front-end web development. It allows developers to add interactivity and dynamic behavior to web pages. 2. What is the difference between null and undefined? null represents the intentional absence of any value. undefined is the default value of a variable that has been declared but not assigned a value. 3. Explain the concept of closures in JavaScript. A closure is a function that retains access to variables from its outer (enclosing) function even after the outer function has finished executing. This allows the inner function to continue referencing those variables. 4. What is the purpose of the this keyword in JavaScript? The this keyword refers to the context in which a function is executed. It can be affected by how the function is called, and it helps to access properties and methods of an object. 5. How does prototypal inheritance work in JavaScript? Objects in JavaScript can inherit properties and methods from other objects through their prototype chain. If a property or method is not found in the current object, JavaScript looks up the prototype chain to find it. 6. Explain the event delegation pattern in JavaScript. Event delegation involves attaching an event listener to a common ancestor of multiple elements, instead of attaching listeners to each individual element. This is useful for improving performance and handling dynamic content. 7. What are the different data types in JavaScript? JavaScript has primitive data types: string , number , boolean , null , undefined , and symbol (ES6). It also has a non-primitive data type: object . 8. What is asynchronous programming in JavaScript? Asynchronous programming allows tasks to run in the background while the main program continues to execute. This is crucial for handling tasks like network requests, timers, and user input without blocking the main thread. 9. What is the purpose of the bind, call, and apply methods? These methods are used to control the value of the this keyword when calling a function. bind creates a new function with a fixed this value. call and apply immediately invoke the function with the provided this value and arguments. 10. How can you handle errors in JavaScript? JavaScript provides the try...catch statement for handling runtime errors. Code inside the try block is executed, and if an exception is thrown, it's caught and processed in the catch block. 11. What are the differences between Java and JavaScript? JavaScript is a client-side scripting language and Java is object Oriented Programming language. Both of them are totally different from each other. JavaScript : It is a light-weighted programming language (\u201cscripting language\u201d) for developing interactive web pages. It can insert dynamic text into the HTML elements. JavaScript is also known as the browser\u2019s language. Java : Java is one of the most popular programming languages. It is an object-oriented programming language and has a virtual machine platform that allows you to create compiled programs that run on nearly every platform. Java promised, \u201cWrite Once, Run Anywhere\u201d. 12. Which symbol is used for comments in JavaScript? Comments prevent the execution of statements. Comments are ignored while the compiler executes the code. There are two type of symbols to represent comments in JavaScript: Double slash: It is known as a single-line comment. `// Single line comment` Slash with Asterisk: It is known as a multi-line comment. /* Multi-line comments ... */ 13. What would be the result of 3+2+\u201d7\u2033? Here, 3 and 2 behave like an integer, and \u201c7\u201d behaves like a string. So 3 plus 2 will be 5. Then the output will be 5+\u201d7\u2033 = 57.","title":"Fundamentals"},{"location":"vanilla/#vanilla-js-questions","text":"","title":"Vanilla JS Questions"},{"location":"vanilla/#1-what-is-javascript","text":"JavaScript is a versatile and widely-used programming language primarily used for front-end web development. It allows developers to add interactivity and dynamic behavior to web pages.","title":"1. What is JavaScript?"},{"location":"vanilla/#2-what-is-the-difference-between-null-and-undefined","text":"null represents the intentional absence of any value. undefined is the default value of a variable that has been declared but not assigned a value.","title":"2. What is the difference between null and undefined?"},{"location":"vanilla/#3-explain-the-concept-of-closures-in-javascript","text":"A closure is a function that retains access to variables from its outer (enclosing) function even after the outer function has finished executing. This allows the inner function to continue referencing those variables.","title":"3. Explain the concept of closures in JavaScript."},{"location":"vanilla/#4-what-is-the-purpose-of-the-this-keyword-in-javascript","text":"The this keyword refers to the context in which a function is executed. It can be affected by how the function is called, and it helps to access properties and methods of an object.","title":"4. What is the purpose of the this keyword in JavaScript?"},{"location":"vanilla/#5-how-does-prototypal-inheritance-work-in-javascript","text":"Objects in JavaScript can inherit properties and methods from other objects through their prototype chain. If a property or method is not found in the current object, JavaScript looks up the prototype chain to find it.","title":"5. How does prototypal inheritance work in JavaScript?"},{"location":"vanilla/#6-explain-the-event-delegation-pattern-in-javascript","text":"Event delegation involves attaching an event listener to a common ancestor of multiple elements, instead of attaching listeners to each individual element. This is useful for improving performance and handling dynamic content.","title":"6. Explain the event delegation pattern in JavaScript."},{"location":"vanilla/#7-what-are-the-different-data-types-in-javascript","text":"JavaScript has primitive data types: string , number , boolean , null , undefined , and symbol (ES6). It also has a non-primitive data type: object .","title":"7. What are the different data types in JavaScript?"},{"location":"vanilla/#8-what-is-asynchronous-programming-in-javascript","text":"Asynchronous programming allows tasks to run in the background while the main program continues to execute. This is crucial for handling tasks like network requests, timers, and user input without blocking the main thread.","title":"8. What is asynchronous programming in JavaScript?"},{"location":"vanilla/#9-what-is-the-purpose-of-the-bind-call-and-apply-methods","text":"These methods are used to control the value of the this keyword when calling a function. bind creates a new function with a fixed this value. call and apply immediately invoke the function with the provided this value and arguments.","title":"9. What is the purpose of the bind, call, and apply methods?"},{"location":"vanilla/#10-how-can-you-handle-errors-in-javascript","text":"JavaScript provides the try...catch statement for handling runtime errors. Code inside the try block is executed, and if an exception is thrown, it's caught and processed in the catch block.","title":"10. How can you handle errors in JavaScript?"},{"location":"vanilla/#11-what-are-the-differences-between-java-and-javascript","text":"JavaScript is a client-side scripting language and Java is object Oriented Programming language. Both of them are totally different from each other. JavaScript : It is a light-weighted programming language (\u201cscripting language\u201d) for developing interactive web pages. It can insert dynamic text into the HTML elements. JavaScript is also known as the browser\u2019s language. Java : Java is one of the most popular programming languages. It is an object-oriented programming language and has a virtual machine platform that allows you to create compiled programs that run on nearly every platform. Java promised, \u201cWrite Once, Run Anywhere\u201d.","title":"11. What are the differences between Java and JavaScript?"},{"location":"vanilla/#12-which-symbol-is-used-for-comments-in-javascript","text":"Comments prevent the execution of statements. Comments are ignored while the compiler executes the code. There are two type of symbols to represent comments in JavaScript: Double slash: It is known as a single-line comment. `// Single line comment` Slash with Asterisk: It is known as a multi-line comment. /* Multi-line comments ... */","title":"12. Which symbol is used for comments in JavaScript?"},{"location":"vanilla/#13-what-would-be-the-result-of-327","text":"Here, 3 and 2 behave like an integer, and \u201c7\u201d behaves like a string. So 3 plus 2 will be 5. Then the output will be 5+\u201d7\u2033 = 57.","title":"13. What would be the result of 3+2+\u201d7\u2033?"}]}